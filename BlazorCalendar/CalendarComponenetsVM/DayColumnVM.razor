@using BlazorCalendar.Models
@using BlazorCalendar.Models.ViewModel
@using BlazorCalendar.Services
@using BlazorCalendar.Styles

@inject TasksService TasksService

<div class="dayGrid">

    @for (int dayTime = 0; dayTime < DayCalendar.TimeDivision.NumberOfCells; dayTime++)
    {
        DateTime time = DayCalendar.Day.AddMinutes(dayTime * DayCalendar.TimeDivision.Minutes);
        int row = dayTime + 1;

        DayCalendar.TimeCell = new TimeCellViewModel();
        DayCalendar.TimeCell.CSSGridPosition = $"grid-row:{row}; grid-column:1 / span {DayCalendar.MaxNumberOfColumns};";
        DayCalendar.TimeCell.Time = time;
        DayCalendar.TimeCell.CSSbackground = GetBackground(DayCalendar.Day);

        <TimeCellVM DayClick="DayClick"
                    EmptyDayClick="EmptyDayClick"
                    Draggable="Draggable"
                    DropTask="DropTask"
                    TimeCell="DayCalendar.TimeCell">
        </TimeCellVM>
    }

    @if (DayCalendar.DayTasks is not null && DayCalendar.DayTasks.Count != 0)
    {
        for (var k = 0; k < DayCalendar.DayTasks.Count; k++)
        {
            Tasks t = DayCalendar.DayTasks[k];

            if (t.DateStart.Date == DayCalendar.Day.Date)
            {
                if (t.RowEnd - t.RowStart != 0)
                {
                    DayCalendar.GridItem = new GridItemViewModel();
                    DayCalendar.GridItem.Task = t;
                    DayCalendar.GridItem.Day = DayCalendar.Day;
                    DayCalendar.GridItem.TaskColor = Colors.GetHatching(t.FillStyle, t.Color);
                    DayCalendar.GridItem.TaskColor = $"{DayCalendar.GridItem.TaskColor};color:{t.ForeColor}";

                    DayCalendar.GridItem.ClassPin = string.IsNullOrWhiteSpace(t.Comment) ? null : " pin";
                    DayCalendar.GridItem.ClassPointer = " cursor-pointer";

                    string gridRow = $"grid-row: {t.RowStart} / span {t.RowEnd - t.RowStart};";
                    string gridColumn = $"grid-column-start: {t.ColumnStart};";

                    string CSSGridPoition = $"{gridRow} {gridColumn}";

                    DayCalendar.GridItem.CSSGridPosition = CSSGridPoition;

                    <GridItemVM GridItem="DayCalendar.GridItem"
                                Draggable="Draggable"
                                DragStart="DragStart"
                                TaskClick="TaskClick">
                    </GridItemVM>
                }
            }

        }
    }
</div>


@code {

    public int MaxNumberOfColumnsInDay { get; set; }

    [Parameter]
    public DayCalendarViewModel DayCalendar { get; set; }

    [Parameter]
    public bool Draggable { get; set; }

    [Parameter]
    public EventCallback<ClickEmptyDayParameter> DayClick { get; set; }

    [Parameter]
    public EventCallback<ClickEmptyDayParameter> EmptyDayClick { get; set; }

    [Parameter]
    public EventCallback<ClickTaskParameter> TaskClick { get; set; }

    [Parameter]
    public EventCallback<DragDropParameter> DragStart { get; set; }

    [Parameter]
    public EventCallback<DragDropParameter> DropTask { get; set; }


    private string GetBackground(DateTime day)
    {
        int d = (int)day.DayOfWeek;

        if (d == 6)
        {
            return $"background:{DayCalendar.SaturdayColor}";
        }
        else if (d == 0)
        {
            return $"background:{DayCalendar.SundayColor}";
        }

        return $"background:{DayCalendar.WeekDaysColor}";
    }
}
