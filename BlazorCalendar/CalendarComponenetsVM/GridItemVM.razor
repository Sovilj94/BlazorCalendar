@using BlazorCalendar.Models
@using BlazorCalendar.Models.ViewModel

@inject ITaskDraggedService TaskDraggedService

<div class="@($"hour-task {GridItem.ClassPin}{GridItem.ClassPointer} border-start border-top border-bottom")"
     style="@GridItem.CSSGridPosition @GridItem.TaskColor"
     draggable="@Draggable.ToString()"
     @ondragstart="(e) => HandleDragStart(GridItem.Task.ID)"
     @onclick="e => ClickTaskInternal(e, GridItem.Task.ID, GridItem.Day)">
    @GridItem.Task.Code
</div>

@code {
    [Parameter]
    public GridItemViewModel GridItem { get; set; }

    [Parameter]
    public bool Draggable { get; set; }

    [Parameter]
    public EventCallback<DragDropParameter> DragStart { get; set; }

    [Parameter]
    public EventCallback<ClickTaskParameter> TaskClick { get; set; }

    private Tasks? TaskDragged;

    private async Task HandleDragStart(int taskID)
    {

        TaskDraggedService.TaskDragged = new Tasks()
            {
                ID = taskID
            };

        DragDropParameter dragDropParameter = new()
            {
                taskID = TaskDraggedService.TaskDragged.ID
            };

        await DragStart.InvokeAsync(dragDropParameter);
    }

    private async Task ClickTaskInternal(MouseEventArgs e, int taskID, DateTime day)
    {
        if (!TaskClick.HasDelegate)
            return;

        List<int> listID = new()
        {
            taskID
        };

        ClickTaskParameter clickTaskParameter = new()
            {
                IDList = listID,
                X = e.ClientX,
                Y = e.ClientY,
                Day = day
            };

        await TaskClick.InvokeAsync(clickTaskParameter);
    }
}
