@using BlazorCalendar.Models
@using BlazorCalendar.Models.ViewModel
@using BlazorCalendar.Styles


@{


}
@for (int column = 0; column < 7; column++)
{
    TimeCell = new TimeCellViewModel();
    TimeCell.CSSGridPosition = $"grid-row:1; grid-column-start:{column + 2}; height:100px; border-right:1px solid #ccc";
    <TimeCellVM TimeCell="TimeCell"></TimeCellVM>
}
@if (Tasks is not null)
{
    Tasks = GetAllDayTasksPositionOnWeekGrid(Day, Tasks);

    for (var k = 0; k < Tasks.Count; k++)
    {
        Tasks t = Tasks[k];

        if (t.DateStart.TimeOfDay == TimeSpan.Zero && t.DateEnd.TimeOfDay == TimeSpan.Zero)
        {
            TaskColor = Colors.GetHatching(t.FillStyle, t.Color);
            TaskColor = $"{TaskColor};color:{t.ForeColor}";

            TimeSpan duration = t.DateEnd - t.DateStart;

            ClassPin = string.IsNullOrWhiteSpace(t.Comment) ? null : " pin";
            ClassPointer = " cursor-pointer";

            int numberOfDays = (t.DateEnd - t.DateStart).Days;
            string CSSGridPosition = $"grid-row-start:{t.RowStart} ;grid-column:{t.ColumnStart} / span {t.ColumnEnd - t.ColumnStart} ;";

@*             <GridItemVM 
                      Draggable="Draggable"
                      DragStart="DragStart"
                      TaskClick="TaskClick">
            </GridItemVM> *@
        }
    }
}

@code {
    public string TaskColor { get; set; }

    public string ClassPin { get; set; }

    public string ClassPointer { get; set; }

    [Parameter]
    public TimeCellViewModel TimeCell { get; set; }

    [Parameter]
    public List<Tasks> Tasks { get; set; }

    [Parameter]
    public int Column { get; set; }

    [Parameter]
    public DateTime Day { get; set; }

    [Parameter]
    public DateTime FirstDateWeek { get; set; }

    [Parameter]
    public bool Draggable { get; set; }

    [Parameter]
    public EventCallback<ClickEmptyDayParameter> DayClick { get; set; }

    [Parameter]
    public EventCallback<ClickEmptyDayParameter> EmptyDayClick { get; set; }

    [Parameter]
    public EventCallback<ClickTaskParameter> TaskClick { get; set; }

    [Parameter]
    public EventCallback<DragDropParameter> DragStart { get; set; }

    [Parameter]
    public EventCallback<DragDropParameter> DropTask { get; set; }

    public List<Tasks> GetAllDayTasksPositionOnWeekGrid(DateTime day, List<Tasks> tasks)
    {
        var lastDateWeek = FirstDateWeek.AddDays(6);
        List<Tasks> tasksForDate = tasks
            .Where(task => task.DateStart.Date >= FirstDateWeek.Date && task.DateEnd.Day - task.DateStart.Day >= 1)
            .OrderBy(x => x.DateStart)
            .ThenBy(x => x.DateEnd)
            .ToList();

        for (int i = 0; i < tasksForDate.Count; i++)
        {
            Tasks currentTask = tasksForDate[i];

            if (currentTask.DateStart.TimeOfDay == TimeSpan.Zero && currentTask.DateEnd.TimeOfDay == TimeSpan.Zero)
            {
                TimeSpan duration = currentTask.DateEnd - currentTask.DateStart;

                int numberOfDays = (currentTask.DateEnd - currentTask.DateStart).Days;

                //get day number of the week
                int startDayNumber = (int)currentTask.DateStart.DayOfWeek;
                int endDayNumber = (int)currentTask.DateEnd.DayOfWeek;




                if (numberOfDays >= 1)
                {
                    int row = 1;

                    currentTask.ColumnStart = startDayNumber + 2;
                    if (endDayNumber == 0)
                    {
                        currentTask.ColumnEnd = 9;
                    }
                    else{
                        currentTask.ColumnEnd = endDayNumber + 2;
                    }
                    currentTask.RowStart = row;
                    row++;
                }
            }
        }

        return tasksForDate;
    }
}
