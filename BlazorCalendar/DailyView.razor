@using System.Globalization
@using BlazorCalendar.Models
@using BlazorCalendar.Styles

@inherits CalendarBase

@{
    // Retrieve the day's date
    DateTime day = FirstDate;

    // Set up the day's name
    string dayName = CultureInfo.GetCultureInfo("en-US").DateTimeFormat.GetDayName(day.DayOfWeek);

    // Define other variables and collections
    string? isHidden = DisplayedView == DisplayedView.Daily ? null : "hidden-element";
    string? CSSbackground = null;
    string? taskColor = null;
    string? classPin = null;
    string? classPointer = null;
    string borderStyle = "";
    int minutes = 0;
    decimal multiplyer = 0;
    int previousDivColumn = 0;

    HashSet<(int TaskID, DateTime Date)> renderedTasks = new HashSet<(int, DateTime)>();

    // The sorting must be done each time we redraw in case the user moves the spots
    
    TasksList = GetTasksWithPosition(TasksList, day).ToArray();

    if (TasksList is not null || TasksList.Length != 0)
    {
        TasksList.OrderBy(task => task.DateStart)
                                     .ThenByDescending(task => task.DateEnd)
                                     .ToArray();
    }

    // Determine time division
    switch (TimeDivision)
    {
        case TimeDivision.Hour:
            minutes = 60;
            multiplyer = 1;
            break;
        case TimeDivision.ThirtyMinutes:
            minutes = 30;
            multiplyer = 2;
            break;
        case TimeDivision.FifteenMinutes:
            minutes = 15;
            multiplyer = 4;
            break;
        default:
            minutes = 60;
            multiplyer = 1;
            break;
    }

}

<div class=@($"{isHidden} daily-calendar") style="@Style">
    <div class="day-header header-name noselect" style="@HeaderStyle; border:1px solid #ccc;"
         ondragover="event.preventDefault();this.style.fontWeight = '600';"
         ondragleave="this.style.fontWeight='100';"
         @ondrop:preventDefault="true"
         @ondrop="() => HandleDayOnDrop(day.AddMinutes(0))"
         @onclick="e => ClickDayInternal(e, day.AddMinutes(0))">
        @dayName @day.ToString("dd.MM")

        @if (TasksList is not null || TasksList.Length != 0)
        {
            int row = 1;
            @for (var k = 0; k < TasksList.Length; k++)
            {
                Tasks t = TasksList[k];

                if (IsTaskTakingWholeDay(day, t))
                {
                    row++;

                    taskColor = Colors.GetHatching(t.FillStyle, t.Color);
                    taskColor = $"{taskColor};color:{t.ForeColor}";

                    classPin = string.IsNullOrWhiteSpace(t.Comment) ? null : " pin";
                    classPointer = " cursor-pointer";

                    <div class="@($"hour-task {classPin}{classPointer} border-start border-top border-bottom")"
                         style="grid-row-start: @row; @taskColor"
                         draggable="@Draggable.ToString()"
                         @ondragstart="() => HandleDragStart(t.ID)"
                         @onclick="e => ClickTaskInternal(e, t.ID, day)">
                        @t.Code
                    </div>
                }
            }
        }
    </div>
    <div class="grid-container">

        @for (int quarterHour = 0; quarterHour < 24 * multiplyer; quarterHour++)
        {
            int row = quarterHour + 1;
            DateTime quarterHours = day.AddMinutes(quarterHour * minutes);

            int totalColumns = TasksList.Any() ? TasksList.Max(x => x.ColumnStart) : 2;

            <div class="hour day-cellule noselect"
                 ondragover="event.preventDefault();this.style.fontWeight = '600';"
                 ondragleave="this.style.fontWeight='100';"
                 @ondrop:preventDefault="true"
                 @ondrop="() => {HandleDayOnDrop(quarterHours);}"
                 @onclick="e => ClickDayInternal(e, quarterHours)"
                 style="@CSSbackground; grid-row:@row; grid-column:1/ span @totalColumns; border:1px solid #ccc">
                @quarterHours.ToString("HH:mm")
            </div>

           

            @if (TasksList is not null || TasksList.Length != 0)
            {
                @foreach (var task in TasksList)
                {
                    DateTime taskStartHour = task.DateStart > day ? task.DateStart : day;
                    DateTime taskEndHour = task.DateEnd < day.AddDays(1) ? task.DateEnd : day.AddDays(1);

                    if (task.DateStart.TimeOfDay != TimeSpan.Zero || task.DateEnd.TimeOfDay != TimeSpan.Zero)
                    {
                        if (task.DateStart <= day.AddMinutes(quarterHour * minutes) && task.DateEnd > day.AddMinutes(quarterHour * minutes))
                        {
                            if (!renderedTasks.Contains((task.ID, day)))
                            {
                                taskColor = Colors.GetHatching(task.FillStyle, task.Color);
                                taskColor = $"{taskColor};color:{task.ForeColor}";

                                classPin = string.IsNullOrWhiteSpace(task.Comment) ? null : " pin";
                                classPointer = " cursor-pointer";

                                TimeSpan duration = taskEndHour - taskStartHour;

                                int rowSpan = (int)Math.Ceiling(duration.TotalMinutes) / minutes;

                                int startRowIndex = (int)((taskStartHour.TimeOfDay.TotalMinutes) / minutes) + 1;

                                string gridRow = $"grid-row: {startRowIndex} / span {rowSpan};";

                                <div class="@($"hour-task {classPin}{classPointer} border-start border-top border-bottom")"
                                     style="@taskColor; grid-column:@task.ColumnStart;@gridRow;"
                                     draggable="@Draggable.ToString()"
                                     @ondragstart="() => HandleDragStart(task.ID)"
                                     @onclick="e => ClickTaskInternal(e, task.ID, day)">
                                    @task.Code
                                </div>
                                renderedTasks.Add((task.ID, day));
                                previousDivColumn = 0;
                            }
                        }
                    }
                }
            }
        }
    </div>
</div>
