<div class="calendar-nav-bar mb-2">
    <div class="btn-group">
        <button type="button" @onclick="GoToday" class="btn btn-outline-secondary nav-btn">📅 Go Today</button>
        <button type="button" @onclick="@(async () => await Navigate(-Skip()))" class="btn btn-outline-secondary nav-btn">🔼</button>
        <button type="button" @onclick="@(async () => await Navigate(Skip()))" class="btn btn-outline-secondary nav-btn">🔽</button>
    </div>

    <div class="selects-and-date">
        <div class="mb-2" style="margin-right:5px">
            <select class="form-select form-select-sm nav-select" aria-label=".form-select-sm example" @onchange="SelectedViewTypeChanged">
                <option value="@DisplayedView.Monthly">Monthly View</option>
                <option selected value="@DisplayedView.Weekly">Weekly View</option>
                <option value="@DisplayedView.Daily">Daily View</option>
            </select>
        </div>

        <div class="mb-2" style="margin-right:5px">
            <select class="form-select form-select-sm nav-select" aria-label=".form-select-sm example" @onchange="TimeDivisionChanged">
                <option value="@TimeDivisionEnum.TwoHours">Two Hours</option>
                <option selected value="@TimeDivisionEnum.Hour">Hour</option>
                <option value="@TimeDivisionEnum.ThirtyMinutes">Thirty Minutes</option>
                <option value="@TimeDivisionEnum.FifteenMinutes">Fifteen Minutes</option>
            </select>
        </div>

        <div class="mb-2" style="margin-right:5px">
            <input type="date" class="form-control nav-input" value="@(FirstDate.ToString("yyyy-MM-dd"))" @onchange="@(async e => await ChangeFirstDate(e.Value.ToString()))" />
        </div>
    </div>
</div>


@code {
    private DisplayedView SelectedViewType = DisplayedView.Weekly;

    [Parameter]
    public EventCallback<DisplayedView> ClickSelectedViewType { get; set; }

    [Parameter]
    public EventCallback<int> ClicMonthNavigate { get; set; }

    [Parameter]
    public EventCallback<TimeDivisionEnum> ClickTimeDivision { get; set; }

    [Parameter]
    public EventCallback<string> FirstDateCallBack { get; set; }

    [Parameter]
    public EventCallback GoTodayCallBack { get; set; }

    private DateTime FirstDate { get; set; } = DateTime.Today;

    private TimeDivisionEnum TimeDivisionEnum { get; set; } = TimeDivisionEnum.Hour;

    private Task GoToday()
    {
        FirstDate = DateTime.Today;
        return GoTodayCallBack.InvokeAsync();
    }

    private Task ChangeFirstDate(string date)
    {
        if (DateTime.TryParse(date, out var parsedDate))
        {
            FirstDate = parsedDate;
        }
        return FirstDateCallBack.InvokeAsync(date);
    }

    private async Task Navigate(int daysToAdd)
    {
        if (SelectedViewType == DisplayedView.Weekly || SelectedViewType == DisplayedView.Daily)
            FirstDate = FirstDate.AddDays(daysToAdd);

        if (SelectedViewType == DisplayedView.Monthly)
            FirstDate = FirstDate.AddMonths(daysToAdd);

        await ClicMonthNavigate.InvokeAsync(daysToAdd);
        await FirstDateCallBack.InvokeAsync(FirstDate.ToString("yyyy-MM-dd"));
    }

    private int Skip()
    {
        return SelectedViewType switch
        {
            DisplayedView.Monthly => 1,
            DisplayedView.Weekly => 7,
            DisplayedView.Daily => 1,
            _ => 0
        };
    }

    private Task TimeDivisionChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse(e.Value.ToString(), out TimeDivisionEnum newValue))
        {
            TimeDivisionEnum = newValue;
            return ClickTimeDivision.InvokeAsync(TimeDivisionEnum);
        }
        return Task.CompletedTask;
    }

    private Task SelectedViewTypeChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse(e.Value.ToString(), out DisplayedView newValue))
        {
            SelectedViewType = newValue;
            return ClickSelectedViewType.InvokeAsync(SelectedViewType);
        }
        return Task.CompletedTask;
    }
}
