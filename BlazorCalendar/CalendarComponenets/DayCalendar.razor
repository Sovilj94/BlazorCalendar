@using BlazorCalendar.Models
@using BlazorCalendar.Models.ViewModel
@using BlazorCalendar.Services
@using BlazorCalendar.Styles

@inject TasksService TasksService

<div class="dayGrid">

    @foreach(var item in DayCalendarViewModel.TimeCells)
    {
            <TimeCell DayClick="DayClick"
                    Draggable="Draggable"
                    DropTask="DropTask"
                  TimeCellViewModel="item">
            </TimeCell>
    }
    

    @if (DayCalendarViewModel.DayTasks is not null && DayCalendarViewModel.DayTasks.Count != 0)
    {
        for (var k = 0; k < DayCalendarViewModel.DayTasks.Count; k++)
        {
            Tasks t = DayCalendarViewModel.DayTasks[k];

            if (t.DateStart.Date == DayCalendarViewModel.Day.Date)
            {
                if (t.RowEnd - t.RowStart != 0)
                {
                    DayCalendarViewModel.GridItem = new GridItemViewModel();
                    DayCalendarViewModel.GridItem.Task = t;
                    DayCalendarViewModel.GridItem.Day = DayCalendarViewModel.Day;
                    DayCalendarViewModel.GridItem.TaskColor = Colors.GetHatching(t.FillStyle, t.Color);
                    DayCalendarViewModel.GridItem.TaskColor = $"{DayCalendarViewModel.GridItem.TaskColor};color:{t.ForeColor}";

                    DayCalendarViewModel.GridItem.ClassPin = string.IsNullOrWhiteSpace(t.Comment) ? null : " pin";
                    DayCalendarViewModel.GridItem.ClassPointer = " cursor-pointer";

                    string gridRow = $"grid-row: {t.RowStart} / span {t.RowEnd - t.RowStart};";
                    string gridColumn = $"grid-column-start: {t.ColumnStart};";

                    string CSSGridPoition = $"{gridRow} {gridColumn}";

                    DayCalendarViewModel.GridItem.CSSGridPosition = CSSGridPoition;

                    <GridItem GridItemViewModel="DayCalendarViewModel.GridItem"
                                Draggable="Draggable"
                                DragStart="DragStart"
                                TaskClick="TaskClick">
                    </GridItem>
                }
            }

        }
    }
</div>

@code {

    public int MaxNumberOfColumnsInDay { get; set; }

    [Parameter]
    public DayCalendarViewModel DayCalendarViewModel { get; set; }

    [Parameter]
    public bool Draggable { get; set; }

    [Parameter]
    public EventCallback<ClickEmptyDayParameter> DayClick { get; set; }

    [Parameter]
    public EventCallback<ClickTaskParameter> TaskClick { get; set; }

    [Parameter]
    public EventCallback<DragDropParameter> DragStart { get; set; }

    [Parameter]
    public EventCallback<DragDropParameter> DropTask { get; set; }


    private string GetBackground(DateTime day)
    {
        int d = (int)day.DayOfWeek;

        if (d == 6)
        {
            return $"background:{DayCalendarViewModel.SaturdayColor}";
        }
        else if (d == 0)
        {
            return $"background:{DayCalendarViewModel.SundayColor}";
        }

        return $"background:{DayCalendarViewModel.WeekDaysColor}";
    }
}
