@using BlazorCalendar.Models
@using BlazorCalendar.Models.ViewModel
@using BlazorCalendar.Styles
@using BlazorCalendar.CalendarComponenets


<div class="all-day-grid">
    <div class="title" style="grid-row-start: 1; grid-column-start: 1; font-size:small">All day</div>
    @foreach (var timeCellViewModel in AllDay.TimeCells)
    {
        <TimeCell DayClick="DayClick"
                  Draggable="Draggable"
                  DropTask="DropTask"
                  DropTaskAllDay="DropTaskAllDay"
                  TimeCellViewModel="timeCellViewModel">
        </TimeCell>
    }

@*     @if (AllDay.Tasks is not null && AllDay.Tasks.Count > 0)
    {
        for (var k = 0; k < AllDay.Tasks.Count; k++)
        {
            Tasks t = AllDay.Tasks[k];

            if (t.DateStart.TimeOfDay == TimeSpan.Zero && t.DateEnd.TimeOfDay == TimeSpan.Zero)
            {
                AllDay.GridItem = new GridItemViewModel();
                AllDay.GridItem.Task = t;
                AllDay.GridItem.Day = AllDay.Day;
                AllDay.GridItem.TaskColor = Colors.GetHatching(t.FillStyle, t.Color);
                AllDay.GridItem.TaskColor = $"{AllDay.GridItem.TaskColor};color:{t.ForeColor}";

                AllDay.GridItem.ClassPin = string.IsNullOrWhiteSpace(t.Comment) ? null : " pin";
                AllDay.GridItem.ClassPointer = " cursor-pointer";

                string CSSGridPosition = $"grid-row-start:{t.RowStart} ;grid-column:{t.ColumnStart} / span {t.ColumnEnd - t.ColumnStart} ;";

                AllDay.GridItem.CSSGridPosition = CSSGridPosition;

                <GridItem GridItemViewModel="AllDay.GridItem"
                          Draggable="Draggable"
                          DragStart="DragStart"
                          TaskClick="TaskClick">
                </GridItem>
            }
        }
    } *@

    @if(AllDay.GridItems is not null && AllDay.GridItems.Count != 0)
    {
        @foreach(var item in AllDay.GridItems)
        {
            <GridItem GridItemViewModel="item"
                      Draggable="Draggable"
                      DragStart="DragStart"
                      TaskClick="TaskClick">
            </GridItem>
        }
    }
</div>
@code {

    [Parameter]
    public AllDayViewModel AllDay { get; set; }

    [Parameter]
    public bool Draggable { get; set; }

    [Parameter]
    public EventCallback<ClickEmptyDayParameter> DayClick { get; set; }

    [Parameter]
    public EventCallback<ClickTaskParameter> TaskClick { get; set; }

    [Parameter]
    public EventCallback<DragDropParameter> DragStart { get; set; }

    [Parameter]
    public EventCallback<DragDropParameter> DropTask { get; set; }

    [Parameter]
    public EventCallback<DragDropParameter> DropTaskAllDay { get; set; }
}
