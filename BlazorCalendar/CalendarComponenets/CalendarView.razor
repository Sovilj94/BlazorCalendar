@using BlazorCalendar.FactoryClasses
@using BlazorCalendar.Models
@using BlazorCalendar.Models.WeekViewModels
@using BlazorCalendar.Models.Interfaces
@using System.Globalization
@using BlazorCalendar.Services
@using BlazorCalendar.CalendarComponenets.WeekCalendarComponents
@using BlazorCalendar.CalendarComponenets.DayCalendarComponents
@using BlazorCalendar.CalendarComponenets.MonthCalendarComponents

@inherits CalendarBase

@inject CalendarViewFactoryProvider CalendarViewFactoryProvider
@inject TasksService TasksService

<CalendarNavigation SelectedViewType="SelectedViewType"
                    ClicMonthNavigate="ClicMonthNavigate"
                    FirstDateCallBack="ChangeFirstDate"
                    GoTodayCallBack="GoToday"
                    ClickTimeDivision="HandleTimeDivisionChanged">
</CalendarNavigation>

@if (SelectedViewType == DisplayedView.Weekly)
{
    <WeekView Draggable="Draggable"
              HighlightToday="true"
              TimeDivisionEnum="TimeDivisionEnum"
              CalendarViewModel="CalendarViewModel">
    </WeekView>
}
else if (SelectedViewType == DisplayedView.Daily)
{
    <DayView Draggable="Draggable"
             TimeDivisionEnum="TimeDivisionEnum"
             CalendarViewModel="CalendarViewModel">
    </DayView>
}
else if (SelectedViewType == DisplayedView.Monthly)
{
    <MonthView CalendarViewModel="CalendarViewModel"
               Draggable="Draggable">
    </MonthView>
}

@code {
    public DateTime FirstDate { get; set; }

    public TimeDivisionEnum TimeDivisionEnum { get; set; } = TimeDivisionEnum.Hour;

    public ICalendarView CalendarViewModel { get; set; }

    [Parameter]
    public DisplayedView SelectedViewType { get; set; }

    protected override void OnInitialized()
    {
        FirstDate = DateTime.Today;
        CalendarViewModel = CalendarViewFactoryProvider.CreateCalendarView(SelectedViewType, FirstDate, TimeDivisionEnum, TasksService.GetAllTasks());

    }

    protected override void OnParametersSet()
    {
        CalendarViewModel = CalendarViewFactoryProvider.CreateCalendarView(SelectedViewType, FirstDate, TimeDivisionEnum, TasksService.GetAllTasks());
    }

    private void ChangeFirstDate(string value)
    {
        if (string.IsNullOrEmpty(value)) return;
        FirstDate = DateTime.Parse(value.ToString());
        RefreshCalendarModel();
    }

    private void GoToday()
    {
        FirstDate = DateTime.Today;
        RefreshCalendarModel();
    }

    private void ClicMonthNavigate(int daysToAdd)
    {
        if (SelectedViewType == DisplayedView.Daily || SelectedViewType == DisplayedView.Weekly)
        {
            FirstDate = FirstDate.AddDays(daysToAdd);
        }
        else if (SelectedViewType == DisplayedView.Monthly)
        {
            FirstDate = FirstDate.AddMonths(daysToAdd);
        }

        RefreshCalendarModel();
    }

    private void RefreshCalendarModel()
    {
        CalendarViewModel = CalendarViewFactoryProvider.CreateCalendarView(SelectedViewType, FirstDate, TimeDivisionEnum, TasksService.GetAllTasks());
        StateHasChanged();
    }

    private Task HandleTimeDivisionChanged(TimeDivisionEnum newTimeDivision)
    {
        TimeDivisionEnum = newTimeDivision;
        RefreshCalendarModel();
        return Task.CompletedTask;
    }
}

