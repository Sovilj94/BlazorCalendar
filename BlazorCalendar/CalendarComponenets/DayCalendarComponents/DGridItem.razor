@using BlazorCalendar.Models
@using BlazorCalendar.Models.Interfaces
@using BlazorCalendar.Models.DayViewModels

@inject ITaskDraggedService TaskDraggedService

<div class="@($"hour-task {GridItemViewModel.ClassPin}{GridItemViewModel.ClassPointer} border-start border-top border-bottom")"
     style="@GridItemViewModel.CSSGridPosition @GridItemViewModel.EventColor"
     draggable="@Draggable.ToString()"
     @ondragstart="(e) => HandleDragStart(GridItemViewModel.Event.ID)"
     @onclick="e => ClickEventInternal(e, GridItemViewModel.Event.ID, GridItemViewModel.Day)">
    @GridItemViewModel.Event.Code
</div>

@code {
    [Parameter]
    public DGridItemViewModel GridItemViewModel { get; set; }

    [Parameter]
    public bool Draggable { get; set; }

    [Parameter]
    public EventCallback<DragDropParameter> DragStart { get; set; }

    [Parameter]
    public EventCallback<ClickTaskParameter> EventClick { get; set; }

    private async Task HandleDragStart(int taskID)
    {

        TaskDraggedService.TaskDragged = new Tasks()
            {
                ID = taskID
            };

        DragDropParameter dragDropParameter = new()
            {
                taskID = TaskDraggedService.TaskDragged.ID
            };

        await DragStart.InvokeAsync(dragDropParameter);
    }

    private async Task ClickEventInternal(MouseEventArgs e, int taskID, DateTime day)
    {
        if (!EventClick.HasDelegate)
            return;

        List<int> listID = new()
        {
            taskID
        };

        ClickTaskParameter clickTaskParameter = new()
            {
                IDList = listID,
                X = e.ClientX,
                Y = e.ClientY,
                Day = day
            };

        await EventClick.InvokeAsync(clickTaskParameter);
    }
}
