@using System.Globalization
@using BlazorCalendar.FactoryClasses
@using BlazorCalendar.Models
@using BlazorCalendar.Models.DayViewModels
@using BlazorCalendar.Models.Interfaces
@using BlazorCalendar.Services
@using BlazorCalendar.Styles

@inherits CalendarBase
@inject TasksService TasksService

<div class="daily-calendar-container">

    <div class="daily-calendar" style="@Style">

        <DayTimeSideBar TimeSideBarViewModel="DayCalendarViewModel.TimeSideBarViewModel ">
        </DayTimeSideBar>

        <DayDayHeader DayHeaderViewModel="DayCalendarViewModel.DayHeaderViewModel">
        </DayDayHeader>

        <DayAllDay DayClick="DayClick"
                 Draggable="Draggable"
                 DragStart="DragStart"
                 DropEventOnAllDay="DropEventOnAllDay"
                 EventClick="EventClick"
                 AllDayViewModel="DayCalendarViewModel.AllDayViewModel">
        </DayAllDay>

        <DayDay DayViewModel="DayCalendarViewModel.DayViewModel"
              Draggable="Draggable"
              DragStart="DragStart"
              DropEventOnDay="DropEventOnDay"
              EventClick="EventClick"
              DayClick="DayClick">
        </DayDay>

    </div>

</div>

<br />
<div class="console">@fakeConsole</div>

@code {
    private string fakeConsole = "";

    protected override void OnInitialized()
    {
        DayCalendarViewModel = (DayCalendarViewModel)CalendarViewModel;
    }

    protected override void OnParametersSet()
    {
        DayCalendarViewModel = (DayCalendarViewModel)CalendarViewModel;
    }

    private DayCalendarViewModel DayCalendarViewModel { get; set; }

    [Parameter]
    public ICalendarView CalendarViewModel { get; set; }

    [Parameter]
    public TimeDivisionEnum TimeDivisionEnum { get; set; }

    [Parameter]
    public bool HighlightToday { get; set; } = false;

    private void EventClick(ClickTaskParameter clickTaskParameter)
    {
        fakeConsole = "ID Event(s) :" + string.Join(", ", clickTaskParameter.IDList);
    }

    private void DayClick(ClickEmptyDayParameter clickEmptyDayParameter)
    {
        fakeConsole = $"Empty day :{clickEmptyDayParameter.Day.ToShortDateString()}  {clickEmptyDayParameter.Day.ToShortTimeString()}";
    }

    private void DragStart(DragDropParameter dragDropParameter)
    {
        fakeConsole = $"DragStart event : {dragDropParameter.taskID}";
    }

    private void DropEventOnDay(DragDropParameter dragDropParameter)
    {
        fakeConsole = $"DropEvent event :{dragDropParameter.Day.ToShortDateString()} {dragDropParameter.taskID}";

        var droppedTask = DayCalendarViewModel.Events.FirstOrDefault(t => t.ID == dragDropParameter.taskID);

        var DayCalendarDropped = DayCalendarViewModel.DayViewModel;

        var gridItemMoved = DayCalendarDropped.GridItemsViewModel.Where(x => x.Event.ID == droppedTask.ID).FirstOrDefault();

        var TotalDay = (droppedTask.DateEnd - droppedTask.DateStart).TotalDays;

        droppedTask.DateEnd = dragDropParameter.Day.AddDays(TotalDay);
        droppedTask.DateStart = dragDropParameter.Day;

        DayCalendarViewModel.DayViewModel.GridItemsViewModel = new DayCalendarViewFactory().GetGridItemsForDayComponent(DayCalendarViewModel.Events, new TimeDivision(TimeDivisionEnum).Minutes,DayCalendarViewModel.DayViewModel.Day);

        DayCalendarViewModel.DayViewModel.MaxNumberOfColumns = DayCalendarViewModel.DayViewModel.GridItemsViewModel.Max(z => z.ColumnStart);

        DayCalendarViewModel.DayViewModel.TimeCellsViewModel.ForEach(x => x.ColumnsSpan = DayCalendarViewModel.DayViewModel.MaxNumberOfColumns);
    }

    private void DropEventOnAllDay(DragDropParameter dragDropParameter)
    {

    }
}