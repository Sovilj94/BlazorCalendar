@using BlazorCalendar.Models
@using BlazorCalendar.Models.WeekViewModels

@inject ITaskDraggedService TaskDraggedService

<div class="all-day-hour day-cellule noselect"
     ondragover="event.preventDefault();this.style.fontWeight = '600';"
     ondragleave="this.style.fontWeight='100';"
     @ondrop:preventDefault="true"
     @ondrop="() => HandleDayOnDrop(TimeCellViewModel.Time)"
     @onclick="e => ClickDayInternal(e, TimeCellViewModel.Time)"
     style="@TimeCellViewModel.CSSbackground; grid-row: 1 / span @TimeCellViewModel.RowsSpan; grid-column-start:@TimeCellViewModel.Column;">
</div>

@code {
    [Parameter]
    public WeekTimeCellViewModel TimeCellViewModel { get; set; }

    [Parameter]
    public bool Draggable { get; set; }

    [Parameter]
    public EventCallback<DragDropParameter> DropEventOnDay { get; set; }

    [Parameter]
    public EventCallback<DragDropParameter> DropEventOnAllDay { get; set; }

    [Parameter]
    public EventCallback<ClickEmptyDayParameter> DayClick { get; set; }

    private Tasks TaskDragged => TaskDraggedService.TaskDragged;

    private async Task HandleDayOnDrop(DateTime day)
    {
        if (!Draggable)
            return;

        if (TaskDragged is null)
            return;

        DragDropParameter dragDropParameter = new()
            {
                Day = day,
                taskID = TaskDragged.ID
            };

        if (TimeCellViewModel.IsAllDayTimesCell)
            await DropEventOnAllDay.InvokeAsync(dragDropParameter);
        else
            await DropEventOnDay.InvokeAsync(dragDropParameter);
    }

    private async Task ClickDayInternal(MouseEventArgs e, DateTime day)
    {
        if (!DayClick.HasDelegate)
            return;

        ClickEmptyDayParameter clickEmptyDayParameter = new()
            {
                Day = day,
                X = e.ClientX,
                Y = e.ClientY
            };

        await DayClick.InvokeAsync(clickEmptyDayParameter);
    }
}
