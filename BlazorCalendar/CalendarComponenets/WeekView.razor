@using System.Globalization
@using BlazorCalendar.Models
@using BlazorCalendar.Models.ViewModel
@using BlazorCalendar.Models.ViewModel.Interfaces
@using BlazorCalendar.Services
@using BlazorCalendar.Styles

@inherits CalendarBase
@inject TasksService TasksService

<div class="weekly-calendar" style="@Style">

    <TimeSideBar TimeSideBarViewModel="WeekCalendarViewModel.TimeSideBar ">
    </TimeSideBar>

    @for (int i = 0; i < WeekCalendarViewModel.DayHeader.Count; i++)
    {
        <div class="day-header-column" style="grid-column-start: @(i+2);">
            <DayHeaderVM DayHeader="WeekCalendarViewModel.DayHeader[i]">
            </DayHeaderVM>
        </div>
    }

    <AllDayTasks DayClick="DayClick"
                   Draggable="Draggable"
                   DragStart="DragStart"
                   DropTask="DropTask"
                   DropTaskAllDay="DropTaskAllDay"
                   TaskClick="TaskClick"
                 AllDay="WeekCalendarViewModel.AllDay">
    </AllDayTasks>

    @for (int i = 0; i < WeekCalendarViewModel.DayCalendar.Count; i++)
    {
        <div class="day-column" style="grid-column-start: @(i+2);">
            <DayCalendar DayCalendarViewModel="WeekCalendarViewModel.DayCalendar[i]"
                         Draggable="Draggable"
                         DragStart="DragStart"
                         DropTask="DropTask"
                         TaskClick="TaskClick"
                         DayClick="DayClick">
            </DayCalendar>
        </div>
    }

</div>

<br />
<div class="console">@fakeConsole</div>

@code {
    private string fakeConsole = "";

    protected override void OnInitialized()
    {
        WeekCalendarViewModel = (WeekCalendarViewModel)CalendarViewModel;
    }

    protected override void OnParametersSet()
    {
        WeekCalendarViewModel = (WeekCalendarViewModel)CalendarViewModel;
    }

    private WeekCalendarViewModel WeekCalendarViewModel { get; set; }

    [Parameter]
    public ICalendarView CalendarViewModel { get; set; }

    [Parameter]
    public TimeDivisionEnum TimeDivisionEnum { get; set; }

    [Parameter]
    public bool HighlightToday { get; set; } = false;

    private void TaskClick(ClickTaskParameter clickTaskParameter)
    {
        fakeConsole = "ID task(s) :" + string.Join(", ", clickTaskParameter.IDList);
    }

    private void DayClick(ClickEmptyDayParameter clickEmptyDayParameter)
    {
        fakeConsole = $"Empty day :{clickEmptyDayParameter.Day.ToShortDateString()}  {clickEmptyDayParameter.Day.ToShortTimeString()}";
    }

    private void DragStart(DragDropParameter dragDropParameter)
    {
        fakeConsole = $"DragStart event : {dragDropParameter.taskID}";
    }

    private void DropTask(DragDropParameter dragDropParameter)
    {
        fakeConsole = $"DropTask event :{dragDropParameter.Day.ToShortDateString()} {dragDropParameter.taskID}";

        var droppedTask = WeekCalendarViewModel.Tasks.FirstOrDefault(t => t.ID == dragDropParameter.taskID);

        var DayCalendarDropped = WeekCalendarViewModel.DayCalendar.FirstOrDefault(x => x.Day.Date == dragDropParameter.Day.Date);
        var DayCalendarDragged = WeekCalendarViewModel.DayCalendar.FirstOrDefault(x => x.Day.Date == droppedTask.DateStart.Date);

        DayCalendarDropped.DayTasks.Add(droppedTask);
        DayCalendarDragged.DayTasks.Remove(droppedTask);

        var TotalDay = (droppedTask.DateEnd - droppedTask.DateStart).TotalDays;

        droppedTask.DateEnd = dragDropParameter.Day.AddDays(TotalDay);
        droppedTask.DateStart = dragDropParameter.Day;

        WeekCalendarViewModel.DayCalendar.ForEach(x => x.DayTasks = TasksService.GetTasksForDayViewModel(x.Day, WeekCalendarViewModel.Tasks, TimeDivisionEnum));

        if (DayCalendarDropped.DayTasks.Count != 0)
            DayCalendarDropped.MaxNumberOfColumns = DayCalendarDropped.DayTasks.Max(x => x.ColumnStart);

        if (DayCalendarDragged.DayTasks.Count != 0)
            DayCalendarDragged.MaxNumberOfColumns = DayCalendarDragged.DayTasks.Max(x => x.ColumnStart);
    }

    private void DropTaskAllDay(DragDropParameter dragDropParameter)
    {
        var droppedTask = WeekCalendarViewModel.AllDay.Tasks.FirstOrDefault(x => x.ID == dragDropParameter.taskID);

        if (droppedTask != null)
        {
            var TotalDay = (droppedTask.DateEnd - droppedTask.DateStart).TotalDays;

            droppedTask.DateEnd = dragDropParameter.Day.AddDays(TotalDay);
            droppedTask.DateStart = dragDropParameter.Day;

            WeekCalendarViewModel.AllDay.Tasks = TasksService.GetAllDayTaskPositionForDayGrid(WeekCalendarViewModel.AllDay.Tasks, WeekCalendarViewModel.AllDay.FirstDateWeek);
        }

    }
}