@using System.Globalization
@using BlazorCalendar.Models
@using BlazorCalendar.Styles

@inherits CalendarBase

@{
    DateTime FirstDateWeek = new DateTime(FirstDate.Year, FirstDate.Month, FirstDate.Day).AddDays(-(Dates.GetNumOfDay((int)FirstDate.Date.DayOfWeek)));
    //string[] dayNames = CultureInfo.GetCultureInfo("sr-RS").DateTimeFormat.AbbreviatedDayNames;
    string[] dayNames = { "Pon", "Uto", "Sre", "Čet", "Pet", "Sub", "Ned" };
    string? isHidden = DisplayedView == DisplayedView.Weekly ? null : "hidden-element";
    string? CSSbackground = null;
    string? taskColor = null;
    string? classPin = null;
    string? classPointer = null;
    string borderStyle = "";
    int minutes = 0;
    decimal multiplyer = 0;

    HashSet<(int TaskID, DateTime Date)> renderedTasks = new HashSet<(int, DateTime)>();

    // The sorting must be done each time we redraw in case the user moves the spots
    if (TasksList is not null)
    {
        TasksList = TasksList.OrderBy(x => x.DateStart)
                             .ThenByDescending(x => x.DateEnd)
                             .ToArray();
    }

    switch (TimeDivision)
    {
        case TimeDivision.Hour:
            minutes = 60;
            multiplyer = 1;
            break;
        case TimeDivision.FifteenMinutes:
            minutes = 15;
            multiplyer = 4;
            break;
        case TimeDivision.ThirtyMinutes:
            minutes = 30;
            multiplyer = 2;
            break;
        case TimeDivision.TwoHours:
            minutes = 120;
            multiplyer = 0.5m;
            break;
        default:
            minutes = 60;
            multiplyer = 1;
            break;
    }

}

<div class=@($"{isHidden} weekly-calendar") style="@Style">
    @for (var i = 0; i < 7; i++)
    {
        int d = Dates.GetNumOfDay(i);
        DateTime day = FirstDateWeek.AddDays(i);

        <div class="day-column" style="grid-column-start: @(i+1)">

            <div class="day-header header-name noselect" style="@HeaderStyle; border:1px solid #ccc;"
                 ondragover="event.preventDefault();this.style.fontWeight = '600';"
                 ondragleave="this.style.fontWeight='100';"
                 @ondrop:preventDefault="true"
                 @ondrop="() => HandleDayOnDrop(day.AddMinutes(0))"
                 @onclick="e => ClickDayInternal(e, day.AddMinutes(0))">
                @dayNames[d] @day.ToString("dd.MM")
                @if (TasksList is not null)
                {
                    int row = 1;
                    @for (var k = 0; k < TasksList.Length; k++)
                    {
                        Tasks t = TasksList[k];

                        if ((t.DateStart.Hour == 0 && t.DateStart.Minute == 0) && (t.DateEnd.Hour == 0 && t.DateEnd.Minute == 0))
                        {
                            if (t.DateStart <= day && t.DateEnd > day)
                            {
                                row++;

                                taskColor = Colors.GetHatching(t.FillStyle, t.Color);
                                taskColor = $"{taskColor};color:{t.ForeColor}";

                                classPin = string.IsNullOrWhiteSpace(t.Comment) ? null : " pin";
                                classPointer = " cursor-pointer";

                                <div class="@($"hour-task {classPin}{classPointer} border-start border-top border-bottom")"
                                     style="grid-column-row: @row; @taskColor; height:10px;"
                                     draggable="@Draggable.ToString()"
                                     @ondragstart="() => HandleDragStart(t.ID)"
                                     @onclick="e => ClickTaskInternal(e, t.ID, day)">
                                    @t.Code
                                </div>
                            }
                        }
                    }
                }

            </div>

            <div class="hours">
                @{
                    CSSbackground = GetBackground(day);
                }
                @for (int quorterHour = 0; quorterHour < 24 * multiplyer; quorterHour++)
                {
                    DateTime quorterHours = day.AddMinutes(quorterHour * minutes);
                    <div class="hour day-cellule noselect"
                         ondragover="event.preventDefault();this.style.fontWeight = '600';"
                         ondragleave="this.style.fontWeight='100';"
                         @ondrop:preventDefault="true"
                         @ondrop="() => HandleDayOnDrop(quorterHours)"
                         @onclick="e => ClickDayInternal(e, quorterHours)"
                         style="@CSSbackground">
                        @quorterHours.ToString("HH:mm")
                    </div>

                    @if (TasksList is not null)
                    {
                        int column = 1;

                        for (var k = 0; k < TasksList.Length; k++)
                        {
                            Tasks t = TasksList[k];

                            TimeSpan dateDiff = t.DateEnd - t.DateStart;

                            if (t.DateStart.TimeOfDay != TimeSpan.Zero || t.DateEnd.TimeOfDay != TimeSpan.Zero)
                            {
                                if (t.DateStart <= day.AddMinutes(quorterHour * minutes) && t.DateEnd > day.AddMinutes(quorterHour * minutes))
                                {
                                    column++;

                                    if (!renderedTasks.Contains((t.ID, day)))
                                    {

                                        DateTime taskStartHour = t.DateStart > day ? t.DateStart : day;
                                        DateTime taskEndHour = t.DateEnd < day.AddDays(1) ? t.DateEnd : day.AddDays(1);

                                        TimeSpan duration = taskEndHour - taskStartHour;
                                        int rowSpan = (int)Math.Ceiling(duration.TotalMinutes) / minutes;

                                        int startRowIndex = (int)((taskStartHour.TimeOfDay.TotalMinutes) / minutes) + 1;

                                        string gridRow = $"grid-row: {startRowIndex} / span {rowSpan};";

                                        taskColor = Colors.GetHatching(t.FillStyle, t.Color);
                                        taskColor = $"{taskColor};color:{t.ForeColor}";

                                        classPin = string.IsNullOrWhiteSpace(t.Comment) ? null : " pin";
                                        classPointer = " cursor-pointer";

                                        <div class="@($"hour-task {classPin}{classPointer} border-start border-top border-bottom")"
                                             style="grid-column-start: @column; @gridRow @taskColor"
                                             draggable="@Draggable.ToString()"
                                             @ondragstart="() => HandleDragStart(t.ID)"
                                             @onclick="e => ClickTaskInternal(e, t.ID, day)">
                                            @t.Code
                                        </div>

                                        renderedTasks.Add((t.ID, day));
                                    }
                                }
                            }
                        }
                    }
                }
            </div>
        </div>
    }
</div>
