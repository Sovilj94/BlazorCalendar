@page "/weeklyviewVM"
@using BlazorCalendar
@using BlazorCalendar.CalendarComponenetsVM
@using BlazorCalendar.Models
@using System.Globalization
@using BlazorCalendar.Models.ViewModel
@using BlazorCalendar.Services

@inject TasksService TasksService

<div class="d-flex flex-row mb-2">
    <button type="button" @onclick="GoToday" class="btn">📅 Go Today</button>
    <button type="button" @onclick="@(m => ClicMonthNavigate(-7))" class="btn">🔼</button>
    <button type="button" @onclick="@(m => ClicMonthNavigate(7))" class="btn me-2">🔽</button>
    <input type="date" class="me-2" value="@(today.ToString("yyyy-MM-dd"))" @onchange="@(e => ChangeFirstDate(e.Value.ToString()))" />
    <select @bind="@PriorityDisplay" class="me-2">
        <option value="@PriorityLabel.Code" selected>priority Code</option>
        <option value="@PriorityLabel.Caption">priority Caption</option>
    </select>
    <select @bind="@TimeDivisionEnum" class="me-2">
        <option value="@TimeDivisionEnum.TwoHours">Two Hours</option>
        <option value="@TimeDivisionEnum.Hour">Hour </option>
        <option value="@TimeDivisionEnum.ThirtyMinutes">Thirty Minutes</option>
        <option value="@TimeDivisionEnum.FifteenMinutes">Fifteen Minutes</option>
    </select>
    <div>
        <input type="checkbox" @bind="draggable" id="is-draggable" />
        <label for="is-draggable">Draggable</label>
    </div>
</div>


@* <CalendarContainer 
    From="DateTime.Now" 
    To="DateTime.AddDays(7)"
    CurrentView="WeekView"
    CalendarViewModel="_calendarViewModel"
    />
 *@

<CalendarContainer FirstDate="today"
                   TasksList="TasksList.ToList()"
                   DisplayedView="DisplayedView.Weekly"
                   TimeDivisionEnum="@TimeDivisionEnum">
    <WeekViewVM  PriorityDisplay="@PriorityDisplay"
                 OutsideCurrentMonthClick="OutsideCurrentMonthClick"
                 TaskClick="TaskClick"
                 DayClick="DayClick"
                 Draggable="@draggable"
                 DragStart="DragStart"
                 DropTask="DropTask"
                 HighlightToday="true"
                 WeekCalendar="WeekCalendarViewModel"/>
</CalendarContainer>

<br />
<div class="console">@fakeConsole</div>

@code {
    private DateTime today = DateTime.Today;
    private int months = 12;
    private List<Tasks> TasksList;
    private string fakeConsole = "";
    private BlazorCalendar.PriorityLabel PriorityDisplay = PriorityLabel.Code;
    private TimeDivisionEnum TimeDivisionEnum = TimeDivisionEnum.Hour;
    private bool draggable = true;

    public DateTime FirstDateWeek { get; set; }
    public CultureInfo culture = CultureInfo.CurrentCulture;
    public DayOfWeek FirstDayOfWeek { get; set; }
    public string[] dayNames = { "Ned", "Pon", "Uto", "Sre", "Čet", "Pet", "Sub" };

    public string WeekDaysColor { get; set; } = "#FFF";

    public string SaturdayColor { get; set; } = "#ECF4FD";

    public string SundayColor { get; set; } = "#DBE7F8";

    public WeekCalendarViewModel WeekCalendarViewModel { get; set; } = new WeekCalendarViewModel();

    protected override void OnInitialized()
    {
        CultureInfo.DefaultThreadCurrentCulture = new CultureInfo("en-US");

        TasksList = TasksService.GetAllTasks();

        FirstDayOfWeek = culture.DateTimeFormat.FirstDayOfWeek;
        FirstDateWeek = today.AddDays(-(today.DayOfWeek - FirstDayOfWeek));

        WeekCalendarViewModel.DayHeader = new List<DayHeaderViewModel>();
        WeekCalendarViewModel.DayCalendar = new List<DayCalendarViewModel>();
        WeekCalendarViewModel.AllDay = new AllDayViewModel();
        WeekCalendarViewModel.TimeSideBar = new TimeSideBarViewModel();

        @for (int i = 0; i < 7; i++)
        {
            int d = Dates.GetNumOfDay(i);
            DateTime day = FirstDateWeek.AddDays(i);
            DayHeaderViewModel DayHeader = new DayHeaderViewModel();
            DayHeader.DayName = dayNames[d];
            DayHeader.DayDate = day.ToString("dd.MM");

            DayCalendarViewModel DayCalendar = new DayCalendarViewModel();
            DayCalendar.SaturdayColor = SaturdayColor;
            DayCalendar.SundayColor = SundayColor;
            DayCalendar.WeekDaysColor = WeekDaysColor;
            DayCalendar.TimeDivision = new TimeDivision(TimeDivisionEnum);
            DayCalendar.Tasks = TasksList;
            DayCalendar.Day = day;

            WeekCalendarViewModel.DayHeader.Add(DayHeader);
            WeekCalendarViewModel.DayCalendar.Add(DayCalendar);
        }

        WeekCalendarViewModel.AllDay.Tasks = TasksList;
        WeekCalendarViewModel.AllDay.FirstDateWeek = FirstDateWeek;

        WeekCalendarViewModel.TimeSideBar.TimeDivision = new TimeDivision(TimeDivisionEnum);
    }

    protected override void OnParametersSet()
    {
        WeekCalendarViewModel.TimeSideBar.TimeDivision = new TimeDivision(TimeDivisionEnum);
        WeekCalendarViewModel.DayCalendar.ForEach(x => x.TimeDivision = new TimeDivision(TimeDivisionEnum));
    }



    private void ChangeFirstDate(string value)
    {
        if (string.IsNullOrEmpty(value)) return;
        today = DateTime.Parse(value.ToString());
    }

    private void GoToday()
    {
        today = DateTime.Today;
    }

    private void ClicMonthNavigate(int daysToAdd)
    {
        today = today.AddDays(daysToAdd);
    }

    private void OutsideCurrentMonthClick(int MonthAdded)
    {
        today = today.AddMonths(MonthAdded);
    }

    private void TaskClick(ClickTaskParameter clickTaskParameter)
    {
        fakeConsole = "ID task(s) :" + string.Join(", ", clickTaskParameter.IDList);
    }

    private void DayClick(ClickEmptyDayParameter clickEmptyDayParameter)
    {
        fakeConsole = $"Empty day :{clickEmptyDayParameter.Day.ToShortDateString()}  {clickEmptyDayParameter.Day.ToShortTimeString()}";
    }

    private void DragStart(DragDropParameter dragDropParameter)
    {
        fakeConsole = $"DragStart event : {dragDropParameter.taskID}";
    }

    private void DropTask(DragDropParameter dragDropParameter)
    {
        fakeConsole = $"DropTask event :{dragDropParameter.Day.ToShortDateString()} {dragDropParameter.taskID}";

        Tasks taskDropped = TasksList.FirstOrDefault(t => t.ID == dragDropParameter.taskID);

        var TotalDay = (taskDropped.DateEnd - taskDropped.DateStart).TotalDays;
        taskDropped.DateEnd = dragDropParameter.Day.AddDays(TotalDay);
        taskDropped.DateStart = dragDropParameter.Day;
    }
}