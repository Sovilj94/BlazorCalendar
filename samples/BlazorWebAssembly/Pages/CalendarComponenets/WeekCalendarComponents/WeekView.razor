@using System.Globalization
@using BlazorCalendar
@using BlazorCalendar.FactoryClasses
@using BlazorCalendar.Models
@using BlazorCalendar.Models.WeekViewModels
@using BlazorCalendar.Models.Interfaces
@using BlazorCalendar.Services
@using BlazorCalendar.Styles
@using BlazorWebAssembly.Pages.DialogComponent
@using Microsoft.JSInterop

@inherits CalendarBase
@inject TasksService TasksService
@inject WeekCalendarViewFactory WeekCalendarViewFactory
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

<div class="weekly-calendar" style="@Style">

    <WeekTimeSideBar TimeSideBarViewModel="WeekCalendarViewModel.TimeSideBar ">
    </WeekTimeSideBar>

    @for (int i = 0; i < WeekCalendarViewModel.DayHeader.Count; i++)
    {
        <div class="day-header-column" style="grid-column-start: @(i+2);">
            <WeekDayHeader DayHeaderViewModel="WeekCalendarViewModel.DayHeader[i]">
            </WeekDayHeader>
        </div>
    }

    <WeekAllDay DayClick="DayClick"
                 Draggable="Draggable"
                 DragStart="DragStart"
                 DropEventOnAllDay="DropEventOnAllDay"
                 EventClick="EventClick"
                AllDayViewModel="WeekCalendarViewModel.AllDay">
    </WeekAllDay>

    @for (int i = 0; i < WeekCalendarViewModel.DayCalendar.Count; i++)
    {
        <div class="day-column" style="grid-column-start: @(i+2);">
            <WeekDay DayViewModel="WeekCalendarViewModel.DayCalendar[i]"
                         Draggable="Draggable"
                         DragStart="DragStart"
                         DropEventOnDay="DropEventOnDay"
                         EventClick="EventClick"
                         DayClick="DayClick">
            </WeekDay>
        </div>
    }
</div>

<br />
<div class="console">@fakeConsole</div>

@code {
    private string fakeConsole = "";

    protected override void OnInitialized()
    {
        WeekCalendarViewModel = (WeekCalendarViewModel)CalendarViewModel;
    }

    protected override void OnParametersSet()
    {
        WeekCalendarViewModel = (WeekCalendarViewModel)CalendarViewModel;
    }


    private WeekCalendarViewModel WeekCalendarViewModel { get; set; }

    [Parameter]
    public ICalendarView CalendarViewModel { get; set; }

    [Parameter]
    public TimeDivisionEnum TimeDivisionEnum { get; set; }

    [Parameter]
    public bool HighlightToday { get; set; } = false;

    private void EventClick(ClickTaskParameter clickTaskParameter)
    {
        fakeConsole = "ID Event(s) :" + string.Join(", ", clickTaskParameter.IDList);
    }

    private async void DayClick(ClickEmptyDayParameter clickEmptyDayParameter)
    {
        fakeConsole = $"Empty day :{clickEmptyDayParameter.Day.ToShortDateString()}  {clickEmptyDayParameter.Day.ToShortTimeString()}";
       await OpenDialogAsync();

    }

    private void DragStart(DragDropParameter dragDropParameter)
    {
        fakeConsole = $"DragStart event : {dragDropParameter.taskID}";
    }

    private void DropEventOnDay(DragDropParameter dragDropParameter)
    {
        fakeConsole = $"DropEvent event :{dragDropParameter.Day.ToShortDateString()} {dragDropParameter.taskID}";

        var droppedTask = WeekCalendarViewModel.Tasks.FirstOrDefault(t => t.ID == dragDropParameter.taskID);

        var DayCalendarDropped = WeekCalendarViewModel.DayCalendar.FirstOrDefault(x => x.Day.Date == dragDropParameter.Day.Date);
        var DayCalendarDragged = WeekCalendarViewModel.DayCalendar.FirstOrDefault(x => x.Day.Date == droppedTask.DateStart.Date);

        var gridItemMoved = DayCalendarDragged.GridItems.Where(x => x.Event.ID == droppedTask.ID).FirstOrDefault();

        var TotalDay = (droppedTask.DateEnd - droppedTask.DateStart).TotalDays;

        droppedTask.DateEnd = dragDropParameter.Day.AddDays(TotalDay);
        droppedTask.DateStart = dragDropParameter.Day;

        WeekCalendarViewModel = (WeekCalendarViewModel)WeekCalendarViewFactory.CreateCalendarView(WeekCalendarViewModel.Date, TimeDivisionEnum, WeekCalendarViewModel.Tasks);

        StateHasChanged();
    }

    private void DropEventOnAllDay(DragDropParameter dragDropParameter)
    {
        var droppedTask = WeekCalendarViewModel.AllDay.Events.FirstOrDefault(x => x.ID == dragDropParameter.taskID);

        if (droppedTask != null)
        {
            var TotalDay = (droppedTask.DateEnd - droppedTask.DateStart).TotalDays;

            droppedTask.DateEnd = dragDropParameter.Day.AddDays(TotalDay);
            droppedTask.DateStart = dragDropParameter.Day;

            WeekCalendarViewModel = (WeekCalendarViewModel)new WeekCalendarViewFactory().CreateCalendarView(WeekCalendarViewModel.Date, TimeDivisionEnum, WeekCalendarViewModel.AllDay.Events);
        }
    }

    private bool _trapFocus = true;
    private bool _modal = true;

    SimplePerson simplePerson = new()
        {
            Firstname = "Dan",
            Lastname = "Sanderson",
            Age = 42,
        };

    private async Task OpenDialogAsync()
    {

        DialogParameters parameters = new()
            {
                Title = $"Hello {simplePerson.Firstname}",
                PrimaryAction = "Yes",
                PrimaryActionEnabled = false,
                SecondaryAction = "No",
                Width = "500px",
                TrapFocus = _trapFocus,
                Modal = _modal,
                PreventScroll = true
            };

        IDialogReference dialog = await DialogService.ShowDialogAsync<HourClickDialog>(simplePerson, parameters);
        DialogResult? result = await dialog.Result;


        if (result.Data is not null)
        {
            SimplePerson? simplePerson = result.Data as SimplePerson;
        }
        else
        {
        }
    }

    public class SimplePerson
        {
            public string Firstname; 
            public string Lastname ;
            public int Age;
        }
}