@page "/dailyview"
@using BlazorCalendar
@using BlazorCalendar.Models
@using System.Globalization

<div class="d-flex flex-row mb-2">
    <button type="button" @onclick="GoToday" class="btn">📅 Go Today</button>
    <button type="button" @onclick="@(m => ClicDayNavigate(-1))" class="btn">🔼</button>
    <button type="button" @onclick="@(m => ClicDayNavigate(1))" class="btn me-2">🔽</button>
    <input type="date" class="me-2" value="@(today.ToString("yyyy-MM-dd"))" @onchange="@(e => ChangeFirstDate(e.Value.ToString()))" />
    <select @bind="@PriorityDisplay" class="me-2">
        <option value="@PriorityLabel.Code" selected>Priority Code</option>
        <option value="@PriorityLabel.Caption">Priority Caption</option>
    </select>
    <select @bind="@TimeDivisionEnum" class="me-2">
        <option value="@TimeDivisionEnum.Hour">Hour</option>
        <option value="@TimeDivisionEnum.ThirtyMinutes">Thirty Minutes</option>
        <option value="@TimeDivisionEnum.FifteenMinutes">Fifteen Minutes</option>
        <option value="@TimeDivisionEnum.TwoHours">Two Hours</option>
    </select>
    <div>
        <input type="checkbox" @bind="draggable" id="is-draggable" />
        <label for="is-draggable">Draggable</label>
    </div>
</div>

<div>
    <!-- Include the CalendarContainer with DailyView -->
    <CalendarContainer FirstDate="today"
                       TasksList="TasksList.ToList()"
                       DisplayedView="DisplayedView.Daily"
                       TimeDivisionEnum="@TimeDivisionEnum">
        <DailyView PriorityDisplay="@PriorityDisplay"
                   OutsideCurrentMonthClick="OutsideCurrentMonthClick"
                   TaskClick="TaskClick"
                   DayClick="DayClick"
                   Draggable="@draggable"
                   DragStart="DragStart"
                   DropTask="DropTask"
                   HighlightToday="true" />
    </CalendarContainer>
</div>

<br />
<div class="console">@fakeConsole</div>

@code {
    private DateTime today = DateTime.Today;
    private List<Tasks> TasksList;
    private string fakeConsole = "";
    private BlazorCalendar.PriorityLabel PriorityDisplay = PriorityLabel.Code;
    private TimeDivisionEnum TimeDivisionEnum = TimeDivisionEnum.Hour;
    private bool draggable = true;

    protected override void OnInitialized()
    {
        TasksList = new List<Tasks>
        {
            new Tasks { ID = 0, DateStart = today.AddHours(11), DateEnd = today.AddHours(16), Code = "HELLO", Color = "#FFD800", Caption = "Lorem ipsum dolor sit amet", FillStyle = FillStyleEnum.BackwardDiagonal },
            new Tasks { ID = 11, DateStart = today.AddDays(0), DateEnd = today.AddHours(16), Code = "HELLO2", Color = "#87CEEB", Caption = "Lorem ipsum dolor sit amet", FillStyle = FillStyleEnum.Fill },
            new Tasks { ID = 12, DateStart = today.AddDays(0), DateEnd = today.AddHours(12), Code = "HELLO3", Color = "#87CEEB", Caption = "Lorem ipsum dolor sit amet", FillStyle = FillStyleEnum.Fill },
            new Tasks { ID = 13, DateStart = today.AddDays(0), DateEnd = today.AddHours(13), Code = "HELLO4", Color = "#87CEEB", Caption = "Lorem ipsum dolor sit amet", FillStyle = FillStyleEnum.Fill },
            new Tasks { ID = 10, DateStart = today.AddDays(3), DateEnd = today.AddDays(5), Code = "HELLO", Color = "#FFD800", Caption = "Lorem ipsum dolor sit amet", FillStyle = FillStyleEnum.BackwardDiagonal },
            new Tasks { ID = 11, DateStart = today.AddDays(3), DateEnd = today.AddDays(5), Code = "Woha", Color = "#FFD801", Caption = "Lorem ipsum dolor sit amet", FillStyle = FillStyleEnum.BackwardDiagonal },
            new Tasks { ID = 1, DateStart = today.AddDays(4).AddHours(8), DateEnd = today.AddDays(4).AddHours(11), Code = "😉 CP", Color = "#19C319", Caption = "Lorem ipsum dolor sit amet" },
            new Tasks { ID = 2, DateStart = today.AddDays(-2).AddHours(8), DateEnd = today.AddDays(-2).AddHours(20), Code = "POD", Color = "#844fe7", Caption = "Podcast DevApps", FillStyle = FillStyleEnum.ZigZag },
            new Tasks { ID = 3, DateStart = today.AddHours(5), DateEnd = today.AddHours(10), Code = "CALL", Color = "#eb3c37", ForeColor = "#222", Caption = "Lorem ipsum dolor sit amet", FillStyle=FillStyleEnum.CrossDots },
            new Tasks { ID = 4, DateStart = today.AddDays(31), DateEnd = today.AddDays(31), Code = "MTG", Color = "#19C319", Caption = "MTG:France" },
            new Tasks { ID = 5, DateStart = today.AddDays(40), DateEnd = today.AddDays(42), Code = "DEV", Color = "#FFD800", Comment="on Teams template", Caption = "Fusce quis purus eu ante" },
            new Tasks { ID = 6, DateStart = today.AddDays(32), DateEnd = today.AddDays(33), Code = "MEET", Color = "#0d6efd" },
            new Tasks { ID = 7, DateStart = today.AddDays(32), DateEnd = today.AddDays(32), Code = "BLAZOR", Color = "#FFC3FF", Caption = "Blazor Dev" },
            new Tasks { ID = 8, DateStart = today.AddDays(45).AddHours(8), DateEnd = today.AddDays(45).AddHours(9), Code = "MEETING", Color = "#2DD7D7", Comment="Julien's test" },
            new Tasks { ID = 9, DateStart = today.AddDays(-8), DateEnd = today.AddDays(-7), Code = "MEET⭐", Color = "#0d6efd",Caption = "MTG:France" }
        };
    }

    private void ChangeFirstDate(string value)
    {
        if (string.IsNullOrEmpty(value)) return;
        today = DateTime.Parse(value.ToString());
    }

    private void GoToday()
    {
        today = DateTime.Today;
    }

    private void ClicDayNavigate(int daysToAdd)
    {
        today = today.AddDays(daysToAdd);
    }

    private void OutsideCurrentMonthClick(int MonthAdded)
    {
        today = today.AddMonths(MonthAdded);
    }

    private void TaskClick(ClickTaskParameter clickTaskParameter)
    {
        fakeConsole = "ID task(s) :" + string.Join(", ", clickTaskParameter.IDList);
    }

    private void DayClick(ClickEmptyDayParameter clickEmptyDayParameter)
    {
        fakeConsole = $"Empty day :{clickEmptyDayParameter.Day.ToShortDateString()}  {clickEmptyDayParameter.Day.ToShortTimeString()}";
    }

    private void DragStart(DragDropParameter dragDropParameter)
    {
        fakeConsole = $"DragStart event : {dragDropParameter.taskID}";
    }

    private void DropTask(DragDropParameter dragDropParameter)
    {
        fakeConsole = $"DropTask event :{dragDropParameter.Day.ToShortDateString()} {dragDropParameter.taskID}";

        Tasks taskDropped = TasksList.FirstOrDefault(t => t.ID == dragDropParameter.taskID);

        DateTime taskStartHour = taskDropped.DateStart > dragDropParameter.Day ? taskDropped.DateStart : dragDropParameter.Day;
        DateTime taskEndHour = taskDropped.DateEnd < dragDropParameter.Day.AddDays(1) ? taskDropped.DateEnd : dragDropParameter.Day.AddDays(1);

        var TotalDay = (taskDropped.DateEnd - taskDropped.DateStart).TotalDays;
        taskDropped.DateEnd = dragDropParameter.Day.AddDays(TotalDay);
        taskDropped.DateStart = dragDropParameter.Day;



    }
}
